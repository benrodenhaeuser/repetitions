# ---------------------------------------------------------------------------
# naive implementation
# ---------------------------------------------------------------------------

def fibo1(n)
  return 0 if n == 0
  return 1 if n == 1
  fibo1(n - 1) + fibo1(n - 2)
end

# ---------------------------------------------------------------------------
# with memoization
# ---------------------------------------------------------------------------

def fibo2(n)
  f = []
  f[0] = 0
  f[1] = 1

  i = 2

  while i <= n
    f[i] = f[i - 1] + f[i - 2]
    i +=1
  end

  f[n]
end

# ---------------------------------------------------------------------------
# memoization, with a separate array
# ---------------------------------------------------------------------------

def fibo_array(n)
  f = []
  f[0] = 0
  f[1] = 1

  2.upto(n) { |i| f[i] = f[i - 1] + f[i - 2] }

  f
end

def fibo3(n)
  fibo_array(n)[n]
end

# ---------------------------------------------------------------------------
# tests
# ---------------------------------------------------------------------------

p fibo1(1) # 1
p fibo1(2) # 1
p fibo1(3) # 2
p fibo1(10) # 55

puts

p fibo2(1) # 1
p fibo2(2) # 1
p fibo2(3) # 2
p fibo2(10) # 55

puts

p fibo3(1) # 1
p fibo3(2) # 1
p fibo3(3) # 2
p fibo3(10) # 55
